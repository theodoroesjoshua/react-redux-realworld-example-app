{"version":3,"file":"static/js/SettingsScreen.44fcfdf4.chunk.js","mappings":"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","sources":["components/ListErrors.js","features/auth/SettingsScreen.js"],"sourcesContent":["import React, { memo } from 'react';\r\n\r\n/**\r\n * List errors component\r\n *\r\n * @param {Object} props\r\n * @param {{[property: string]: string[]]}} [props.errors]\r\n * @example\r\n * <ListErrors errors={{\r\n *    email: [\"can't be blank\"],\r\n *    password: [\"can't be blank\"],\r\n *    username: [\r\n *      \"can't be blank\",\r\n *      \"is too short (minimum is 1 character)\",\r\n *    ],\r\n * }} />\r\n */\r\nfunction ListErrors({ errors }) {\r\n  if (!errors || Object.keys(errors).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const errorMessages = Object.entries(errors).flatMap(([property, messages]) =>\r\n    messages.map((message) => `${property} ${message}`)\r\n  );\r\n\r\n  return (\r\n    <ul className=\"error-messages\">\r\n      {errorMessages.map((message) => (\r\n        <li key={message}>{message}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default memo(ListErrors);\r\n","import React, { memo, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport ListErrors from '../../components/ListErrors';\r\nimport {\r\n  logout,\r\n  selectErrors,\r\n  selectIsAuthenticated,\r\n  selectIsLoading,\r\n  selectUser,\r\n  updateUser,\r\n} from './authSlice';\r\n\r\n/**\r\n * Settings form component\r\n *\r\n * @param {Object} props\r\n * @param {import('./authSlice').User} props.currentUser\r\n * @param {(user: Partial<import('./authSlice').User>) => Promise<any>} props.onSaveSettings\r\n * @example\r\n * <SettingsForm\r\n *    currentUser={{\r\n *      username: 'warren_boyd',\r\n *      email: 'warren.boyd@mailinator.com',\r\n *      image: 'https://static.productionready.io/images/smiley-cyrus.jpg',\r\n *      bio: null,\r\n *    }}\r\n *    onSaveSettings={user => dispatch(updateUser(user))}\r\n * />\r\n */\r\nfunction SettingsForm({ currentUser, onSaveSettings }) {\r\n  const [image, setImage] = useState(\r\n    currentUser?.image ??\r\n      'https://static.productionready.io/images/smiley-cyrus.jpg'\r\n  );\r\n  const [username, setUsername] = useState(currentUser?.username ?? '');\r\n  const [bio, setBio] = useState(currentUser?.bio ?? '');\r\n  const [email, setEmail] = useState(currentUser?.email ?? '');\r\n  const [password, setPassword] = useState('');\r\n  const isLoading = useSelector(selectIsLoading);\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeImage = (event) => {\r\n    setImage(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeUsername = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeBio = (event) => {\r\n    setBio(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeEmail = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changePassword = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.FormEventHandler<HTMLFormElement>}\r\n   */\r\n  const saveSettings = (event) => {\r\n    event.preventDefault();\r\n\r\n    const user = {\r\n      image,\r\n      username,\r\n      bio,\r\n      email,\r\n    };\r\n\r\n    if (password) {\r\n      user.password = password;\r\n    }\r\n\r\n    onSaveSettings(user);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={saveSettings}>\r\n      <fieldset disabled={isLoading}>\r\n        <fieldset className=\"form-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            placeholder=\"URL of profile picture\"\r\n            name=\"image\"\r\n            value={image}\r\n            onChange={changeImage}\r\n          />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"form-group\">\r\n          <input\r\n            className=\"form-control form-control-lg\"\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            name=\"username\"\r\n            value={username}\r\n            onChange={changeUsername}\r\n          />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"form-group\">\r\n          <textarea\r\n            className=\"form-control form-control-lg\"\r\n            rows={8}\r\n            placeholder=\"Short bio about you\"\r\n            name=\"bio\"\r\n            value={bio}\r\n            onChange={changeBio}\r\n          />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"form-group\">\r\n          <input\r\n            className=\"form-control form-control-lg\"\r\n            autoComplete=\"current-email\"\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={changeEmail}\r\n          />\r\n        </fieldset>\r\n\r\n        <fieldset className=\"form-group\">\r\n          <input\r\n            className=\"form-control form-control-lg\"\r\n            type=\"password\"\r\n            autoComplete=\"current-password\"\r\n            placeholder=\"New Password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={changePassword}\r\n          />\r\n        </fieldset>\r\n\r\n        <button className=\"btn btn-lg btn-primary pull-xs-right\" type=\"submit\">\r\n          Update Settings\r\n        </button>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n}\r\n\r\n/**\r\n * Settings screen component\r\n *\r\n * @example\r\n * <SettingsScreen />\r\n */\r\nfunction SettingsScreen() {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(selectUser);\r\n  const errors = useSelector(selectErrors);\r\n  const isAuthenticated = useSelector(selectIsAuthenticated);\r\n\r\n  const saveSettings = (user) => {\r\n    void dispatch(updateUser(user));\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"settings-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">Your Settings</h1>\r\n\r\n            <ListErrors errors={errors} />\r\n\r\n            <SettingsForm\r\n              currentUser={currentUser}\r\n              onSaveSettings={saveSettings}\r\n            />\r\n\r\n            <hr />\r\n\r\n            <button className=\"btn btn-outline-danger\" onClick={logoutUser}>\r\n              Or click here to logout.\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(SettingsScreen);\r\n"],"names":["ListErrors","errors","Object","keys","length","errorMessages","entries","flatMap","property","map","message","className","memo","SettingsForm","currentUser","onSaveSettings","useState","image","setImage","username","setUsername","bio","setBio","email","setEmail","password","setPassword","isLoading","useSelector","selectIsLoading","onSubmit","event","preventDefault","user","disabled","type","placeholder","name","value","onChange","target","rows","autoComplete","SettingsScreen","dispatch","useDispatch","selectUser","selectErrors","selectIsAuthenticated","updateUser","onClick","logout","to"],"sourceRoot":""}