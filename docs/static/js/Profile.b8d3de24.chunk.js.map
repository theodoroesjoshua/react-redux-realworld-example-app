{"version":3,"file":"static/js/Profile.b8d3de24.chunk.js","mappings":"6PAsBA,SAASA,IACP,OACE,UAAC,KAAD,CACEC,GAAG,YACHC,UAAU,8CAFZ,WAIE,cAAGA,UAAU,eAJf,4BAkBJ,SAASC,EAAT,GAAoD,IAK9CC,EALsBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UAC9BC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,EAAU,wBAGVR,GACFQ,GAAW,iBACXV,EAAW,mBAAeC,KAE1BS,GAAW,yBACXV,EAAW,iBAAaC,IAgB1B,OACE,oBAAQH,UAAWY,EAASC,QAdV,WACbJ,EAMHF,EADEH,GACOU,EAAAA,EAAAA,IAASX,IAETY,EAAAA,EAAAA,IAAOZ,IAPhBE,EAASW,KAAT,+BAAsCC,SAASC,YAYjD,WACE,cAAGlB,UAAU,mBADf,OAGGE,KAoBP,SAASiB,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QACZX,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BU,EAAgBD,EAAQjB,YAAR,OAAqBM,QAArB,IAAqBA,OAArB,EAAqBA,EAAaN,UAExD,OACE,gBAAKH,UAAU,YAAf,UACE,gBAAKA,UAAU,YAAf,UACE,gBAAKA,UAAU,MAAf,UACE,iBAAKA,UAAU,kCAAf,WACE,gBACEsB,IACEF,EAAQG,OACR,4DAEFvB,UAAU,WACVwB,IAAKJ,EAAQjB,YAEf,wBAAKiB,EAAQjB,YACb,uBAAIiB,EAAQK,MAEXJ,GACC,SAACvB,EAAD,KAEA,SAACG,EAAD,CACEE,SAAUiB,EAAQjB,SAClBC,UAAWgB,EAAQhB,qBAmBnC,SAASsB,EAAT,GAAiD,IAA1BvB,EAAyB,EAAzBA,SAAUwB,EAAe,EAAfA,YAC/B,OACE,gBAAK3B,UAAU,kBAAf,UACE,gBAAIA,UAAU,+BAAd,WACE,eAAIA,UAAU,WAAd,UACE,SAAC,KAAD,CACEA,UAAW2B,EAAc,WAAa,kBACtC5B,GAAE,WAAMI,GAFV,4BAQF,eAAIH,UAAU,WAAd,UACE,SAAC,KAAD,CACEA,UAAW2B,EAAc,kBAAoB,WAC7C5B,GAAE,WAAMI,EAAN,cAFJ,uCAkBV,SAASyB,EAAT,GAA+C,EAA5BX,SAA6B,IAAnBY,EAAkB,EAAlBA,eACrBtB,GAAWC,EAAAA,EAAAA,MACXY,GAAUV,EAAAA,EAAAA,KAAY,SAACoB,GAAD,OAAWA,EAAMV,WACrCjB,GAAa4B,EAAAA,EAAAA,MAAb5B,SAkBR,OAhBA6B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe1B,GAAS2B,EAAAA,EAAAA,IAAW/B,IACnCgC,EAAgB5B,EACpBsB,GACIO,EAAAA,EAAAA,IAAoB,CAAEjC,SAAAA,KACtBkC,EAAAA,EAAAA,IAAoB,CAAEC,OAAQnC,KAGpC,OAAO,WACL8B,EAAaM,QACbJ,EAAcI,WAEf,CAACpC,EAAU0B,KAEdG,EAAAA,EAAAA,YAAU,kBAAM,kBAAMzB,GAASiC,EAAAA,EAAAA,UAAwB,IAElDpB,GAKH,iBAAKpB,UAAU,eAAf,WACE,SAACmB,EAAD,CAAUC,QAASA,KAEnB,gBAAKpB,UAAU,iBAAf,UACE,gBAAKA,UAAU,MAAf,UACE,iBAAKA,UAAU,kCAAf,WACE,SAAC0B,EAAD,CACEvB,SAAUiB,EAAQjB,SAClBwB,YAAaE,KAGf,SAAC,IAAD,cAfD,KAuBX,WAAeY,EAAAA,EAAAA,MAAKb","sources":["components/Profile.js"],"sourcesContent":["import React, { memo, useEffect } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ArticleList from './ArticleList';\r\nimport {\r\n  getArticlesByAuthor,\r\n  getFavoriteArticles,\r\n} from '../reducers/articleList';\r\nimport {\r\n  follow,\r\n  unfollow,\r\n  getProfile,\r\n  profilePageUnloaded,\r\n} from '../reducers/profile';\r\nimport { selectUser } from '../features/auth/authSlice';\r\n\r\n/**\r\n * Go to profile settings\r\n *\r\n * @example\r\n * <EditProfileSettings />\r\n */\r\nfunction EditProfileSettings() {\r\n  return (\r\n    <Link\r\n      to=\"/settings\"\r\n      className=\"btn btn-sm btn-outline-secondary action-btn\"\r\n    >\r\n      <i className=\"ion-gear-a\" /> Edit Profile Settings\r\n    </Link>\r\n  );\r\n}\r\n\r\n/**\r\n * Follow or unfollow an user\r\n *\r\n * @param {Object} props\r\n * @param {String} props.username\r\n * @param {Boolean} props.following\r\n * @example\r\n * <FollowUserButton username=\"warren_boyd\" following />\r\n */\r\nfunction FollowUserButton({ username, following }) {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(selectUser);\r\n  let classes = 'btn btn-sm action-btn';\r\n  let textMessage;\r\n\r\n  if (following) {\r\n    classes += ' btn-secondary';\r\n    textMessage = `Unfollow ${username}`;\r\n  } else {\r\n    classes += ' btn-outline-secondary';\r\n    textMessage = `Follow ${username}`;\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (!currentUser) {\r\n      navigate.push(`/register?redirectTo=${location.pathname}`);\r\n      return;\r\n    }\r\n\r\n    if (following) {\r\n      dispatch(unfollow(username));\r\n    } else {\r\n      dispatch(follow(username));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button className={classes} onClick={handleClick}>\r\n      <i className=\"ion-plus-round\" />\r\n      &nbsp;\r\n      {textMessage}\r\n    </button>\r\n  );\r\n}\r\n\r\n/**\r\n * Show the profile of an user\r\n *\r\n * @param {Object} props\r\n * @param {Object} props.profile\r\n * @example\r\n * <UserInfo profile={{\r\n *      username: 'warren_boyd',\r\n *      email: 'warren.boyd@mailinator.com',\r\n *      image: 'https://static.productionready.io/images/smiley-cyrus.jpg',\r\n *      bio: null,\r\n *      following: false,\r\n *    }}\r\n * />\r\n */\r\nfunction UserInfo({ profile }) {\r\n  const currentUser = useSelector(selectUser);\r\n  const isCurrentUser = profile.username === currentUser?.username;\r\n\r\n  return (\r\n    <div className=\"user-info\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-12 col-md-10 offset-md-1\">\r\n            <img\r\n              src={\r\n                profile.image ||\r\n                'https://static.productionready.io/images/smiley-cyrus.jpg'\r\n              }\r\n              className=\"user-img\"\r\n              alt={profile.username}\r\n            />\r\n            <h4>{profile.username}</h4>\r\n            <p>{profile.bio}</p>\r\n\r\n            {isCurrentUser ? (\r\n              <EditProfileSettings />\r\n            ) : (\r\n              <FollowUserButton\r\n                username={profile.username}\r\n                following={profile.following}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Profile's navigation\r\n *\r\n * @param {Object}  props\r\n * @param {String}  props.username\r\n * @param {Boolean} props.isFavorites\r\n * @example\r\n * <ProfileTabs username=\"warren_boyd\" isFavorites />\r\n */\r\nfunction ProfileTabs({ username, isFavorites }) {\r\n  return (\r\n    <div className=\"articles-toggle\">\r\n      <ul className=\"nav nav-pills outline-active\">\r\n        <li className=\"nav-item\">\r\n          <Link\r\n            className={isFavorites ? 'nav-link' : 'nav-link active'}\r\n            to={`/${username}`}\r\n          >\r\n            My Articles\r\n          </Link>\r\n        </li>\r\n\r\n        <li className=\"nav-item\">\r\n          <Link\r\n            className={isFavorites ? 'nav-link active' : 'nav-link'}\r\n            to={`/${username}/favorites`}\r\n          >\r\n            Favorited Articles\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Profile screen component\r\n * @param {import('react-router-dom').RouteComponentProps<{ username: string }>} props\r\n * @example\r\n * <Profile />\r\n */\r\nfunction Profile({ location, isFavoritePage }) {\r\n  const dispatch = useDispatch();\r\n  const profile = useSelector((state) => state.profile);\r\n  const { username } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchProfile = dispatch(getProfile(username));\r\n    const fetchArticles = dispatch(\r\n      isFavoritePage\r\n        ? getFavoriteArticles({ username })\r\n        : getArticlesByAuthor({ author: username })\r\n    );\r\n\r\n    return () => {\r\n      fetchProfile.abort();\r\n      fetchArticles.abort();\r\n    };\r\n  }, [username, isFavoritePage]);\r\n\r\n  useEffect(() => () => dispatch(profilePageUnloaded()), []);\r\n\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile-page\">\r\n      <UserInfo profile={profile} />\r\n\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-xs-12 col-md-10 offset-md-1\">\r\n            <ProfileTabs\r\n              username={profile.username}\r\n              isFavorites={isFavoritePage}\r\n            />\r\n\r\n            <ArticleList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Profile);\r\n"],"names":["EditProfileSettings","to","className","FollowUserButton","textMessage","username","following","navigate","useNavigate","dispatch","useDispatch","currentUser","useSelector","selectUser","classes","onClick","unfollow","follow","push","location","pathname","UserInfo","profile","isCurrentUser","src","image","alt","bio","ProfileTabs","isFavorites","Profile","isFavoritePage","state","useParams","useEffect","fetchProfile","getProfile","fetchArticles","getFavoriteArticles","getArticlesByAuthor","author","abort","profilePageUnloaded","memo"],"sourceRoot":""}