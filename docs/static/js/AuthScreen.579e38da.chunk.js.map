{"version":3,"file":"static/js/AuthScreen.579e38da.chunk.js","mappings":"4LAiBA,SAASA,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OACpB,IAAKA,GAAyC,IAA/BC,OAAOC,KAAKF,GAAQG,OACjC,OAAO,KAGT,IAAMC,EAAgBH,OAAOI,QAAQL,GAAQM,SAAQ,+BAAEC,EAAF,iBAC1CC,KAAI,SAACC,GAAD,gBAAgBF,EAAhB,YAA4BE,SAG3C,OACE,eAAIC,UAAU,iBAAd,SACGN,EAAcI,KAAI,SAACC,GAAD,OACjB,wBAAmBA,GAAVA,QAMjB,KAAeE,EAAAA,EAAAA,MAAKZ,I,+GCrBpB,SAASa,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,iBACpB,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXtB,GAASuB,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAaF,EAAAA,EAAAA,IAAYG,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,MA2CjB,OACE,gBAAKlB,UAAU,YAAf,UACE,gBAAKA,UAAU,iBAAf,UACE,gBAAKA,UAAU,MAAf,UACE,iBAAKA,UAAU,iCAAf,WACE,eAAIA,UAAU,iBAAd,SACGG,EAAmB,UAAY,aAElC,cAAGH,UAAU,iBAAb,SACGG,GACC,SAAC,KAAD,CAAMgB,GAAG,SAAT,+BAEA,SAAC,KAAD,CAAMA,GAAG,YAAT,iCAIJ,SAAC,IAAD,CAAY7B,OAAQA,KAEpB,iBAAM8B,SApCS,SAACC,GACxBA,EAAMC,iBACNX,EACER,GACIoB,EAAAA,EAAAA,IAAS,CAAElB,SAAAA,EAAUI,MAAAA,EAAOF,SAAAA,KAC5BiB,EAAAA,EAAAA,IAAM,CAAEf,MAAAA,EAAOF,SAAAA,KACnBkB,MAAK,SAACC,GAC4B,aAA9BA,EAAOC,KAAKC,eAIdX,EADEd,EACO,SAEA,SAuBL,UACE,sBAAU0B,SAAUd,EAApB,UACGZ,GACC,qBAAUH,UAAU,aAApB,UACE,kBACEA,UAAU,+BACV8B,KAAK,OACLC,YAAY,WACZC,aAAa,WACbC,KAAK,WACLC,MAAO7B,EACP8B,SApEG,SAACd,GACtBf,EAAYe,EAAMe,OAAOF,YAsET,MAEJ,qBAAUlC,UAAU,aAApB,UACE,kBACEA,UAAU,+BACV8B,KAAK,QACLC,YAAY,QACZC,aAAa,QACbE,MAAOzB,EACP0B,SAzEE,SAACd,GACnBX,EAASW,EAAMe,OAAOF,aA4EV,qBAAUlC,UAAU,aAApB,UACE,kBACEA,UAAU,+BACV8B,KAAK,WACLE,aAAa,eACbD,YAAY,WACZE,KAAK,WACLC,MAAO3B,EACP4B,SA9EK,SAACd,GACtBb,EAAYa,EAAMe,OAAOF,aAiFb,mBACElC,UAAU,uCACV8B,KAAK,SAFP,SAIG3B,EAAmB,UAAY,0BAWlD,WAAeF,EAAAA,EAAAA,MAAKC","sources":["components/ListErrors.js","features/auth/AuthScreen.js"],"sourcesContent":["import React, { memo } from 'react';\r\n\r\n/**\r\n * List errors component\r\n *\r\n * @param {Object} props\r\n * @param {{[property: string]: string[]]}} [props.errors]\r\n * @example\r\n * <ListErrors errors={{\r\n *    email: [\"can't be blank\"],\r\n *    password: [\"can't be blank\"],\r\n *    username: [\r\n *      \"can't be blank\",\r\n *      \"is too short (minimum is 1 character)\",\r\n *    ],\r\n * }} />\r\n */\r\nfunction ListErrors({ errors }) {\r\n  if (!errors || Object.keys(errors).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const errorMessages = Object.entries(errors).flatMap(([property, messages]) =>\r\n    messages.map((message) => `${property} ${message}`)\r\n  );\r\n\r\n  return (\r\n    <ul className=\"error-messages\">\r\n      {errorMessages.map((message) => (\r\n        <li key={message}>{message}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default memo(ListErrors);\r\n","import React, { memo, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ListErrors from '../../components/ListErrors';\r\nimport { login, register, selectErrors, selectIsLoading } from './authSlice';\r\n\r\n/**\r\n * Auth screen component\r\n *\r\n * @example\r\n * <AuthScreen />\r\n */\r\nfunction AuthScreen({ isRegisterScreen }) {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const dispatch = useDispatch();\r\n  const errors = useSelector(selectErrors);\r\n  const inProgress = useSelector(selectIsLoading);\r\n  const navigate = useNavigate();\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeUsername = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeEmail = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changePassword = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.FormEventHandler<HTMLFormElement>}\r\n   */\r\n  const authenticateUser = (event) => {\r\n    event.preventDefault();\r\n    dispatch(\r\n      isRegisterScreen\r\n        ? register({ username, email, password })\r\n        : login({ email, password })\r\n    ).then((action) => {\r\n      if (action.meta.requestStatus === 'rejected') {\r\n        return;\r\n      }\r\n      if (isRegisterScreen) {\r\n        navigate('/login');\r\n      } else {\r\n        navigate('/');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 offset-md-3 col-xs-12\">\r\n            <h1 className=\"text-xs-center\">\r\n              {isRegisterScreen ? 'Sign Up' : 'Sign In'}\r\n            </h1>\r\n            <p className=\"text-xs-center\">\r\n              {isRegisterScreen ? (\r\n                <Link to=\"/login\">Have an account?</Link>\r\n              ) : (\r\n                <Link to=\"/register\">Need an account?</Link>\r\n              )}\r\n            </p>\r\n\r\n            <ListErrors errors={errors} />\r\n\r\n            <form onSubmit={authenticateUser}>\r\n              <fieldset disabled={inProgress}>\r\n                {isRegisterScreen ? (\r\n                  <fieldset className=\"form-group\">\r\n                    <input\r\n                      className=\"form-control form-control-lg\"\r\n                      type=\"text\"\r\n                      placeholder=\"Username\"\r\n                      autoComplete=\"username\"\r\n                      name=\"username\"\r\n                      value={username}\r\n                      onChange={changeUsername}\r\n                    />\r\n                  </fieldset>\r\n                ) : null}\r\n\r\n                <fieldset className=\"form-group\">\r\n                  <input\r\n                    className=\"form-control form-control-lg\"\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    autoComplete=\"email\"\r\n                    value={email}\r\n                    onChange={changeEmail}\r\n                  />\r\n                </fieldset>\r\n\r\n                <fieldset className=\"form-group\">\r\n                  <input\r\n                    className=\"form-control form-control-lg\"\r\n                    type=\"password\"\r\n                    autoComplete=\"new-password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={password}\r\n                    onChange={changePassword}\r\n                  />\r\n                </fieldset>\r\n\r\n                <button\r\n                  className=\"btn btn-lg btn-primary pull-xs-right\"\r\n                  type=\"submit\"\r\n                >\r\n                  {isRegisterScreen ? 'Sign up' : 'Sign in'}\r\n                </button>\r\n              </fieldset>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(AuthScreen);\r\n"],"names":["ListErrors","errors","Object","keys","length","errorMessages","entries","flatMap","property","map","message","className","memo","AuthScreen","isRegisterScreen","useState","username","setUsername","password","setPassword","email","setEmail","dispatch","useDispatch","useSelector","selectErrors","inProgress","selectIsLoading","navigate","useNavigate","to","onSubmit","event","preventDefault","register","login","then","action","meta","requestStatus","disabled","type","placeholder","autoComplete","name","value","onChange","target"],"sourceRoot":""}