{"version":3,"file":"static/js/Editor.879133e2.chunk.js","mappings":"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","sources":["components/Editor.js","components/ListErrors.js"],"sourcesContent":["import React, { useState, useEffect, memo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ListErrors from './ListErrors';\r\nimport {\r\n  getArticle,\r\n  createArticle,\r\n  updateArticle,\r\n  articlePageUnloaded,\r\n} from '../reducers/article';\r\nimport { useNavigate, useParams } from 'react-router';\r\n\r\n/**\r\n * Editor component\r\n * @param {import('react-router-dom').RouteComponentProps<{ slug?: string }>} props\r\n * @example\r\n * <Editor />\r\n */\r\nfunction Editor({ match }) {\r\n  const dispatch = useDispatch();\r\n  const { article, errors, inProgress } = useSelector((state) => state.article);\r\n  const { slug } = useParams();\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [body, setBody] = useState('');\r\n  const [tagInput, setTagInput] = useState('');\r\n  const [tagList, setTagList] = useState([]);\r\n  const navigate = useNavigate();\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeTitle = (event) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeDescription = (event) => {\r\n    setDescription(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLAreaElement>}\r\n   */\r\n  const changeBody = (event) => {\r\n    setBody(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLInputElement>}\r\n   */\r\n  const changeTagInput = (event) => {\r\n    setTagInput(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Reset the form values\r\n   */\r\n  const reset = () => {\r\n    if (slug && article) {\r\n      setTitle(article.title);\r\n      setDescription(article.description);\r\n      setBody(article.body);\r\n      setTagList(article.tagList);\r\n    } else {\r\n      setTitle('');\r\n      setDescription('');\r\n      setBody('');\r\n      setTagInput('');\r\n      setTagList([]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add a tag to tagList\r\n   * @type {React.KeyboardEventHandler<HTMLInputElement>}\r\n   */\r\n  const addTag = (event) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n\r\n      if (tagInput && !tagList.includes(tagInput))\r\n        setTagList([...tagList, tagInput]);\r\n\r\n      setTagInput('');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Remove a tag from tagList\r\n   *\r\n   * @param {String} tag\r\n   * @returns {React.MouseEventHandler}\r\n   */\r\n  const removeTag = (tag) => () => {\r\n    setTagList(tagList.filter((_tag) => _tag !== tag));\r\n  };\r\n\r\n  /**\r\n   * @type {React.MouseEventHandler<HTMLButtonElement>}\r\n   */\r\n  const submitForm = (event) => {\r\n    event.preventDefault();\r\n    const article = {\r\n      slug,\r\n      title,\r\n      description,\r\n      body,\r\n      tagList,\r\n    };\r\n\r\n    dispatch(slug ? updateArticle(article) : createArticle(article));\r\n    navigate('/');\r\n  };\r\n\r\n  useEffect(() => {\r\n    reset();\r\n    if (slug) {\r\n      dispatch(getArticle(slug));\r\n    }\r\n  }, [slug]);\r\n\r\n  useEffect(reset, [article]);\r\n\r\n  useEffect(() => () => dispatch(articlePageUnloaded()), []);\r\n\r\n  return (\r\n    <div className=\"editor-page\">\r\n      <div className=\"container page\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-10 offset-md-1 col-xs-12\">\r\n            <ListErrors errors={errors} />\r\n\r\n            <form>\r\n              <fieldset>\r\n                <fieldset className=\"form-group\">\r\n                  <input\r\n                    className=\"form-control form-control-lg\"\r\n                    type=\"text\"\r\n                    placeholder=\"Article Title\"\r\n                    value={title}\r\n                    onChange={changeTitle}\r\n                  />\r\n                </fieldset>\r\n\r\n                <fieldset className=\"form-group\">\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"What's this article about?\"\r\n                    value={description}\r\n                    onChange={changeDescription}\r\n                  />\r\n                </fieldset>\r\n\r\n                <fieldset className=\"form-group\">\r\n                  <textarea\r\n                    className=\"form-control\"\r\n                    rows=\"8\"\r\n                    placeholder=\"Write your article (in markdown)\"\r\n                    value={body}\r\n                    onChange={changeBody}\r\n                  />\r\n                </fieldset>\r\n\r\n                <fieldset className=\"form-group\">\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter tags\"\r\n                    value={tagInput}\r\n                    onChange={changeTagInput}\r\n                    onKeyUp={addTag}\r\n                  />\r\n\r\n                  <div className=\"tag-list\">\r\n                    {tagList.map((tag) => {\r\n                      return (\r\n                        <span className=\"tag-default tag-pill\" key={tag}>\r\n                          <i\r\n                            className=\"ion-close-round\"\r\n                            onClick={removeTag(tag)}\r\n                          />\r\n                          {tag}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </fieldset>\r\n\r\n                <button\r\n                  className=\"btn btn-lg pull-xs-right btn-primary\"\r\n                  type=\"button\"\r\n                  disabled={inProgress}\r\n                  onClick={submitForm}\r\n                >\r\n                  Publish Article\r\n                </button>\r\n              </fieldset>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Editor);\r\n","import React, { memo } from 'react';\r\n\r\n/**\r\n * List errors component\r\n *\r\n * @param {Object} props\r\n * @param {{[property: string]: string[]]}} [props.errors]\r\n * @example\r\n * <ListErrors errors={{\r\n *    email: [\"can't be blank\"],\r\n *    password: [\"can't be blank\"],\r\n *    username: [\r\n *      \"can't be blank\",\r\n *      \"is too short (minimum is 1 character)\",\r\n *    ],\r\n * }} />\r\n */\r\nfunction ListErrors({ errors }) {\r\n  if (!errors || Object.keys(errors).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const errorMessages = Object.entries(errors).flatMap(([property, messages]) =>\r\n    messages.map((message) => `${property} ${message}`)\r\n  );\r\n\r\n  return (\r\n    <ul className=\"error-messages\">\r\n      {errorMessages.map((message) => (\r\n        <li key={message}>{message}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default memo(ListErrors);\r\n"],"names":["Editor","match","dispatch","useDispatch","useSelector","state","article","errors","inProgress","slug","useParams","useState","title","setTitle","description","setDescription","body","setBody","tagInput","setTagInput","tagList","setTagList","navigate","useNavigate","reset","removeTag","tag","filter","_tag","useEffect","getArticle","articlePageUnloaded","className","type","placeholder","value","onChange","event","target","rows","onKeyUp","key","preventDefault","includes","map","onClick","disabled","updateArticle","createArticle","memo","ListErrors","Object","keys","length","errorMessages","entries","flatMap","property","message"],"sourceRoot":""}