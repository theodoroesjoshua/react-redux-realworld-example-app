{"version":3,"file":"static/js/CommentSection.3181d803.chunk.js","mappings":"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","sources":["components/ListErrors.js","features/comments/CommentList.js","features/comments/CommentSection.js"],"sourcesContent":["import React, { memo } from 'react';\r\n\r\n/**\r\n * List errors component\r\n *\r\n * @param {Object} props\r\n * @param {{[property: string]: string[]]}} [props.errors]\r\n * @example\r\n * <ListErrors errors={{\r\n *    email: [\"can't be blank\"],\r\n *    password: [\"can't be blank\"],\r\n *    username: [\r\n *      \"can't be blank\",\r\n *      \"is too short (minimum is 1 character)\",\r\n *    ],\r\n * }} />\r\n */\r\nfunction ListErrors({ errors }) {\r\n  if (!errors || Object.keys(errors).length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const errorMessages = Object.entries(errors).flatMap(([property, messages]) =>\r\n    messages.map((message) => `${property} ${message}`)\r\n  );\r\n\r\n  return (\r\n    <ul className=\"error-messages\">\r\n      {errorMessages.map((message) => (\r\n        <li key={message}>{message}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default memo(ListErrors);\r\n","import React, { memo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\n\nimport {\n  getCommentsForArticle,\n  removeComment,\n  selectAllComments,\n  selectIsAuthor,\n  selectIsLoading,\n} from './commentsSlice';\n\n/**\n * Delete a comment\n *\n * @param {object}  props\n * @param {number}  props.commentId\n * @example\n * <DeleteCommentButton commentId={1} />\n */\nfunction DeleteCommentButton({ commentId }) {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const { slug } = useParams();\n\n  /**\n   * @type {React.MouseEventHandler<HTMLButtonElement>}\n   */\n  const deleteComment = () => {\n    dispatch(removeComment({ articleSlug: slug, commentId }));\n  };\n\n  return (\n    <button\n      className=\"btn btn-sm btn-link mod-options\"\n      disabled={isLoading}\n      onClick={deleteComment}\n    >\n      <i className=\"ion-trash-a\" />\n      <span className=\"sr-only\">Delete comment</span>\n    </button>\n  );\n}\n\n/**\n *\n * @param {object} props\n * @param {import('../../agent').Comment} props.comment\n * @example\n * <Comment\n *    comment={{\n *      id: 1,\n *      createdAt: \"2016-02-18T03:22:56.637Z\",\n *      updatedAt: \"2016-02-18T03:22:56.637Z\",\n *      body: \"It takes a Jacobian\",\n *      author: {\n *        username: \"jake\",\n *        bio: \"I work at statefarm\",\n *        image: \"https://i.stack.imgur.com/xHWG8.jpg\",\n *        following: false,\n *      },\n *    }}\n * />\n */\nfunction Comment({ comment }) {\n  const isAuthor = useSelector(selectIsAuthor(comment.id));\n\n  return (\n    <div className=\"card\" data-testid=\"comment\">\n      <div className=\"card-block\">\n        <p className=\"card-text\">{comment.body}</p>\n      </div>\n\n      <div className=\"card-footer\">\n        <Link to={`/${comment.author.username}`} className=\"comment-author\">\n          <img\n            className=\"comment-author-img\"\n            alt={comment.author.username}\n            src={\n              comment.author.image ??\n              'https://static.productionready.io/images/smiley-cyrus.jpg'\n            }\n          />\n        </Link>\n        &nbsp;\n        <Link to={`/${comment.author.username}`} className=\"comment-author\">\n          {comment.author.username}\n        </Link>\n        <time className=\"date-posted\" dateTime={comment.createdAt}>\n          {new Date(comment.createdAt).toDateString()}\n        </time>\n        {isAuthor ? <DeleteCommentButton commentId={comment.id} /> : null}\n      </div>\n    </div>\n  );\n}\n\n/**\n * List all comments of an article\n *\n * @example\n * <CommentList />\n */\nfunction CommentList() {\n  const dispatch = useDispatch();\n  const comments = useSelector(selectAllComments);\n  const isLoading = useSelector(selectIsLoading);\n  const { slug } = useParams();\n\n  useEffect(() => {\n    const fetchComments = dispatch(getCommentsForArticle(slug));\n\n    return () => {\n      fetchComments.abort();\n    };\n  }, [slug]);\n\n  if (isLoading) {\n    return <p>Loading comments</p>;\n  }\n\n  return (\n    <>\n      {comments.map((comment) => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </>\n  );\n}\n\nexport default memo(CommentList);\n","import React, { memo, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\nimport ListErrors from '../../components/ListErrors';\r\nimport { selectIsAuthenticated, selectUser } from '../auth/authSlice';\r\nimport CommentList from './CommentList';\r\nimport { createComment, selectErrors } from './commentsSlice';\r\n\r\n/**\r\n * Add comment\r\n *\r\n * @example\r\n * <CommentForm />\r\n */\r\nfunction CommentForm() {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(selectUser);\r\n  const { slug } = useParams();\r\n  const [body, setBody] = useState('');\r\n\r\n  /**\r\n   * @type {React.ChangeEventHandler<HTMLTextAreaElement>}\r\n   */\r\n  const changeBody = (event) => {\r\n    setBody(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * @type {React.FormEventHandler<HTMLFormElement>}\r\n   */\r\n  const saveComment = (event) => {\r\n    event.preventDefault();\r\n    dispatch(createComment({ articleSlug: slug, comment: { body } }));\r\n    setBody('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"card comment-form\" onSubmit={saveComment}>\r\n      <div className=\"card-block\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          placeholder=\"Write a comment...\"\r\n          rows={3}\r\n          value={body}\r\n          onChange={changeBody}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"card-footer\">\r\n        <img\r\n          className=\"comment-author-img\"\r\n          alt={currentUser.username}\r\n          src={\r\n            currentUser.image ??\r\n            'https://static.productionready.io/images/smiley-cyrus.jpg'\r\n          }\r\n        />\r\n        <button className=\"btn btn-sm btn-primary\" type=\"submit\">\r\n          Post Comment\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\n/**\r\n * Comments for an article\r\n *\r\n * @example\r\n * <CommentSection />\r\n */\r\nfunction CommentSection() {\r\n  const isAuthenticaded = useSelector(selectIsAuthenticated);\r\n  const errors = useSelector(selectErrors);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {isAuthenticaded ? (\r\n        <div className=\"col-xs-12 col-md-8 offset-md-2\">\r\n          <ListErrors errors={errors} />\r\n\r\n          <CommentForm />\r\n\r\n          <CommentList />\r\n        </div>\r\n      ) : (\r\n        <div className=\"col-xs-12 col-md-8 offset-md-2\">\r\n          <p>\r\n            <Link to=\"/login\">Sign in</Link>\r\n            &nbsp;or&nbsp;\r\n            <Link to=\"/register\">sign up</Link>\r\n            &nbsp;to add comments on this article.\r\n          </p>\r\n\r\n          <CommentList />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(CommentSection);\r\n"],"names":["ListErrors","errors","Object","keys","length","errorMessages","entries","flatMap","property","map","message","className","memo","DeleteCommentButton","commentId","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","slug","useParams","disabled","onClick","removeComment","articleSlug","Comment","comment","isAuthor","selectIsAuthor","id","body","to","author","username","alt","src","image","dateTime","createdAt","Date","toDateString","CommentList","comments","selectAllComments","useEffect","fetchComments","getCommentsForArticle","abort","CommentForm","currentUser","selectUser","useState","setBody","onSubmit","event","preventDefault","createComment","placeholder","rows","value","onChange","target","type","CommentSection","isAuthenticaded","selectIsAuthenticated","selectErrors"],"sourceRoot":""}