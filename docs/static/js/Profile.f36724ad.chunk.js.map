{"version":3,"file":"static/js/Profile.f36724ad.chunk.js","mappings":"4SAsBA,SAASA,IACP,OACE,UAAC,KAAD,CACEC,GAAG,YACHC,UAAU,8CAFZ,WAIE,cAAGA,UAAU,eAJf,4BAkBG,SAASC,EAAT,GAAoD,IAKrDC,EAL6BC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,UACrCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,EAAU,wBAGVR,GACFQ,GAAW,iBACXV,EAAW,mBAAeC,KAE1BS,GAAW,yBACXV,EAAW,iBAAaC,IAgB1B,OACE,oBAAQH,UAAWY,EAASC,QAdV,WACbJ,EAMHF,EADEH,GACOU,EAAAA,EAAAA,IAASX,IAETY,EAAAA,EAAAA,IAAOZ,IAPhBE,EAAS,WAYX,WACE,cAAGL,UAAU,mBADf,OAGGE,KAoBP,SAASc,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QACZR,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BO,EAAgBD,EAAQd,YAAR,OAAqBM,QAArB,IAAqBA,OAArB,EAAqBA,EAAaN,UAExD,OACE,gBAAKH,UAAU,YAAf,UACE,gBAAKA,UAAU,YAAf,UACE,gBAAKA,UAAU,MAAf,UACE,iBAAKA,UAAU,kCAAf,WACE,gBACEmB,IACEF,EAAQG,OACR,4DAEFpB,UAAU,WACVqB,IAAKJ,EAAQd,YAEf,wBAAKc,EAAQd,YACb,uBAAIc,EAAQK,MAEXJ,GACC,SAACpB,EAAD,KAEA,SAACG,EAAD,CACEE,SAAUc,EAAQd,SAClBC,UAAWa,EAAQb,qBAmBnC,SAASmB,EAAT,GAAiD,IAA1BpB,EAAyB,EAAzBA,SAAUqB,EAAe,EAAfA,YAC/B,OACE,gBAAKxB,UAAU,kBAAf,UACE,gBAAIA,UAAU,+BAAd,WACE,eAAIA,UAAU,WAAd,UACE,SAAC,KAAD,CACEA,UAAWwB,EAAc,WAAa,kBACtCzB,GAAE,WAAMI,GAFV,4BAQF,eAAIH,UAAU,WAAd,UACE,SAAC,KAAD,CACEA,UAAWwB,EAAc,kBAAoB,WAC7CzB,GAAE,WAAMI,EAAN,cAFJ,uCAkBV,SAASsB,EAAT,GAA+C,EAA5BC,SAA6B,IAAnBC,EAAkB,EAAlBA,eACrBpB,GAAWC,EAAAA,EAAAA,MACXS,GAAUP,EAAAA,EAAAA,KAAY,SAACkB,GAAD,OAAWA,EAAMX,WACrCd,GAAa0B,EAAAA,EAAAA,MAAb1B,SAkBR,OAhBA2B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAexB,GAASyB,EAAAA,EAAAA,IAAW7B,IACnC8B,EAAgB1B,EACpBoB,GACIO,EAAAA,EAAAA,IAAoB,CAAE/B,SAAAA,KACtBgC,EAAAA,EAAAA,IAAoB,CAAEC,OAAQjC,KAGpC,OAAO,WACL4B,EAAaM,QACbJ,EAAcI,WAEf,CAAClC,EAAUwB,KAEdG,EAAAA,EAAAA,YAAU,kBAAM,kBAAMvB,GAAS+B,EAAAA,EAAAA,UAAwB,IAElDrB,GAKH,iBAAKjB,UAAU,eAAf,WACE,SAACgB,EAAD,CAAUC,QAASA,KAEnB,gBAAKjB,UAAU,iBAAf,UACE,gBAAKA,UAAU,MAAf,UACE,iBAAKA,UAAU,kCAAf,WACE,SAACuB,EAAD,CACEpB,SAAUc,EAAQd,SAClBqB,YAAaG,KAGf,SAAC,IAAD,cAfD,KAuBX,WAAeY,EAAAA,EAAAA,MAAKd","sources":["components/Profile.js"],"sourcesContent":["import React, { memo, useEffect } from 'react';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ArticleList from './ArticleList';\nimport {\n  getArticlesByAuthor,\n  getFavoriteArticles,\n} from '../reducers/articleList';\nimport {\n  follow,\n  unfollow,\n  getProfile,\n  profilePageUnloaded,\n} from '../reducers/profile';\nimport { selectUser } from '../features/auth/authSlice';\n\n/**\n * Go to profile settings\n *\n * @example\n * <EditProfileSettings />\n */\nfunction EditProfileSettings() {\n  return (\n    <Link\n      to=\"/settings\"\n      className=\"btn btn-sm btn-outline-secondary action-btn\"\n    >\n      <i className=\"ion-gear-a\" /> Edit Profile Settings\n    </Link>\n  );\n}\n\n/**\n * Follow or unfollow an user\n *\n * @param {Object} props\n * @param {String} props.username\n * @param {Boolean} props.following\n * @example\n * <FollowUserButton username=\"warren_boyd\" following />\n */\nexport function FollowUserButton({ username, following }) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const currentUser = useSelector(selectUser);\n  let classes = 'btn btn-sm action-btn';\n  let textMessage;\n\n  if (following) {\n    classes += ' btn-secondary';\n    textMessage = `Unfollow ${username}`;\n  } else {\n    classes += ' btn-outline-secondary';\n    textMessage = `Follow ${username}`;\n  }\n\n  const handleClick = () => {\n    if (!currentUser) {\n      navigate('/login');\n      return;\n    }\n\n    if (following) {\n      dispatch(unfollow(username));\n    } else {\n      dispatch(follow(username));\n    }\n  };\n\n  return (\n    <button className={classes} onClick={handleClick}>\n      <i className=\"ion-plus-round\" />\n      &nbsp;\n      {textMessage}\n    </button>\n  );\n}\n\n/**\n * Show the profile of an user\n *\n * @param {Object} props\n * @param {Object} props.profile\n * @example\n * <UserInfo profile={{\n *      username: 'warren_boyd',\n *      email: 'warren.boyd@mailinator.com',\n *      image: 'https://static.productionready.io/images/smiley-cyrus.jpg',\n *      bio: null,\n *      following: false,\n *    }}\n * />\n */\nfunction UserInfo({ profile }) {\n  const currentUser = useSelector(selectUser);\n  const isCurrentUser = profile.username === currentUser?.username;\n\n  return (\n    <div className=\"user-info\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-md-10 offset-md-1\">\n            <img\n              src={\n                profile.image ||\n                'https://static.productionready.io/images/smiley-cyrus.jpg'\n              }\n              className=\"user-img\"\n              alt={profile.username}\n            />\n            <h4>{profile.username}</h4>\n            <p>{profile.bio}</p>\n\n            {isCurrentUser ? (\n              <EditProfileSettings />\n            ) : (\n              <FollowUserButton\n                username={profile.username}\n                following={profile.following}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Profile's navigation\n *\n * @param {Object}  props\n * @param {String}  props.username\n * @param {Boolean} props.isFavorites\n * @example\n * <ProfileTabs username=\"warren_boyd\" isFavorites />\n */\nfunction ProfileTabs({ username, isFavorites }) {\n  return (\n    <div className=\"articles-toggle\">\n      <ul className=\"nav nav-pills outline-active\">\n        <li className=\"nav-item\">\n          <Link\n            className={isFavorites ? 'nav-link' : 'nav-link active'}\n            to={`/${username}`}\n          >\n            My Articles\n          </Link>\n        </li>\n\n        <li className=\"nav-item\">\n          <Link\n            className={isFavorites ? 'nav-link active' : 'nav-link'}\n            to={`/${username}/favorites`}\n          >\n            Favorited Articles\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\n/**\n * Profile screen component\n * @param {import('react-router-dom').RouteComponentProps<{ username: string }>} props\n * @example\n * <Profile />\n */\nfunction Profile({ location, isFavoritePage }) {\n  const dispatch = useDispatch();\n  const profile = useSelector((state) => state.profile);\n  const { username } = useParams();\n\n  useEffect(() => {\n    const fetchProfile = dispatch(getProfile(username));\n    const fetchArticles = dispatch(\n      isFavoritePage\n        ? getFavoriteArticles({ username })\n        : getArticlesByAuthor({ author: username })\n    );\n\n    return () => {\n      fetchProfile.abort();\n      fetchArticles.abort();\n    };\n  }, [username, isFavoritePage]);\n\n  useEffect(() => () => dispatch(profilePageUnloaded()), []);\n\n  if (!profile) {\n    return null;\n  }\n\n  return (\n    <div className=\"profile-page\">\n      <UserInfo profile={profile} />\n\n      <div className=\"container page\">\n        <div className=\"row\">\n          <div className=\"col-xs-12 col-md-10 offset-md-1\">\n            <ProfileTabs\n              username={profile.username}\n              isFavorites={isFavoritePage}\n            />\n\n            <ArticleList />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Profile);\n"],"names":["EditProfileSettings","to","className","FollowUserButton","textMessage","username","following","navigate","useNavigate","dispatch","useDispatch","currentUser","useSelector","selectUser","classes","onClick","unfollow","follow","UserInfo","profile","isCurrentUser","src","image","alt","bio","ProfileTabs","isFavorites","Profile","location","isFavoritePage","state","useParams","useEffect","fetchProfile","getProfile","fetchArticles","getFavoriteArticles","getArticlesByAuthor","author","abort","profilePageUnloaded","memo"],"sourceRoot":""}